/**
 * tassis uses an asynchronous messaging pattern for interacting with the API.
 *
 * Clients typically connect to tassis via WebSockets to exchange messages.
 *
 * Clients will typically open two separate connections, authenticating on one and leaving
 * the other unauthenticated.
 *
 * The unauthenticated connection is used for retrieving other users' preKeys and
 * sending messages to them, so as not to reveal the identity of senders.
 *
 * The authenticated connection is used for all other operations, including performing key
 * management and receiving messages from other users.
 *
 * Authentication is performed using a challenge-response pattern in which the server sends
 * an authentication challenge to the client and the client responds with a signed authentication
 * response identifying its UserID and DeviceID. On anonymous connections, clients simply ignore the
 * authentication challenge.
 *
 * Messages sent from clients to servers follow a request/response pattern. The server will always
 * respond to these with either an Ack or a typed response. In the event of an error, it will respond
 * with an Error message. This includes the following messages:
 *
 *  - Register        -> Ack
 *  - Unregister      -> Ack
 *  - RequestPreKeys  -> PreKeys
 *  - OutboundMessage -> Ack
 *
 * Some messages sent from the server to the client require an Ack in response:
 *
 *  - inboundMessage  -> Ack
 *
 * Some messages don't require any response:
 *
 *  - PreKeysLow
 *
 * All messages sent within a given connection are identified by a unique sequence number (separate sequences
 * for each direction). When a response message is sent in either direction, its sequence number is set to the
 * message that triggered the response so that the client or server can correlate responses with requests.
 */
syntax = "proto3";

package tassis;

option go_package = "github.com/getlantern/tassis/model";
option java_package = "io.lantern.tassis";

// Acknowledges successful receipt of a Message
message Ack {}

// Indicates than an error occurred processing a request.
message Error {
  string name        = 1;  // An identifier for the error, like "unknown_user"
  string description = 2;  // Optional additional information about the error
}

// An Address for a specific client
message Address {
  bytes  userID   = 1;  // The 33 byte user ID, which is also the user's public key. It consists of a 1 byte type (always 0x05) followed by 32 bits of ed25519 public key
  uint32 deviceID = 2;  // Identifier for a specific user device, only unique for a given userID
}

// Login information supplied by clients in response to an AuthChallenge.
message Login {
  Address address = 1;  // The Address that's logging in. This will become permanently associated with the current connection
  bytes   nonce   = 2;  // This echoes back the nonce provided by the server in the AuthChallenge
}

// A challenge to the client to authenticate. This is sent by the server once and only once, immediately after clients connect.
message AuthChallenge {
  bytes nonce = 1;  // A nonce to identify this authentication exchange
}

// A response to an AuthChallenge that is sent from the client to the server on any connection that the client wishes to authenticate.
// The server will accept an AuthResponse only once per connection.
message AuthResponse {
  bytes login     = 1;  // The serialized form of the Login message
  bytes signature = 2;  // A signature of the serialized Login message calculated using the private key corresponding to the UserID that's logging in
}

// Requires authentication
//
// A request to register a signed preKey and some set of one-time use preKeys. PreKeys are used by clients to perform X3DH key agreement in order to
// establish end-to-end encrypted sessions.
//
// This information is registered in the database under the client's Address. If multiple registrations are received, if the registrationID and signedPreKey
// match the information on file, the new preKeys will be appended to the ones already on file. Otherwise, the existing registration will be replaced by the
// latest.
message Register {
  uint32         registrationID = 1;  // The local registrationID for this device.
  bytes          signedPreKey   = 2;  // The signedPreKey for this device.
  repeated bytes oneTimePreKeys = 3;  // Zero, one or more disposable preKeys for this device.
}

// Requires authentication
//
// Removes the recorded registration for the client's Address.
message Unregister {}

// Requires anonymous connection
//
// A request to retrieve preKey information for all registered devices for the given UserID except those listed in knownDeviceIDs.
message RequestPreKeys {
  bytes           userID         = 1;  // The UserID for which to retrieve preKeys.
  repeated uint32 knownDeviceIDs = 2;  // Devices which the client already knows about and doesn't need preKeys for.
}

// Information about a PreKey for a specific Address.
message PreKey {
  Address address        = 1;  // The Address that this key material belongs to
  uint32  registrationID = 2;  // The local registrationID for the device at this Address.
  bytes   signedPreKey   = 3;  // The most recent signedPreKey for the device at this Address. See https://crypto.stackexchange.com/questions/72148/signal-protocol-how-is-signed-preKey-created
  bytes   oneTimePreKey  = 4;  // One disposable preKey for the device at this Address. May be empty if none were available (that's okay, Signal can still do an X3DH key agreement without it).
}

// A list of PreKeys for all of a user's devices, sent in response to RequestPreKeys
message PreKeys {
  repeated PreKey preKeys = 1;  // One or more preKeys
}

// A notification from the server to the client that we're running low on oneTimePreKeys for the Address associated to this connection.
//
// Clients may choose to respond to this by sending a Register message with some more preKeys. This does not have to be tied to the initial PreKeysLow message.
message PreKeysLow {
  uint32 keysRequested = 1;  // The number of additional oneTimePreKeys that the server is requesting.
}

// Requires anonymous connection
//
// A message from one client to another.
message OutboundMessage {
  Address to                        = 1;  // The Address of the message recipient
  bytes   unidentifiedSenderMessage = 2;  // A sealed sender message (opaque to tassis). This is what will be delivered to the recipient.
}

// The envelope for all messages sent to/from clients.
message Message {
  uint32 sequence = 1; // the message sequence, either a unique number for request messages or the number of the request message to which a response message corresponds

  oneof payload {
    Ack             ack             =  2;
    Error           error           =  3;
    AuthChallenge   authChallenge   =  4;
    AuthResponse    authResponse    =  5;
    Register        register        =  6;
    Unregister      unregister      =  7;
    RequestPreKeys  requestPreKeys  =  8;
    PreKeys         preKeys         =  9;
    PreKeysLow      preKeysLow      = 10;
    OutboundMessage outboundMessage = 11;
    bytes           inboundMessage  = 12;
  }
}

// Used internally by tassis for messages that are to be forwarded to a federated tassis
message ForwardedMessage {
  OutboundMessage message     = 1;  // The message that's being forwarded
  int64           firstFailed = 2;  // The unix timestamp in nanoseconds for when the message first failed to forward
  int64           lastFailed  = 3;  // The unix timestamp in nanoseconds for when the message most recently failed to forward
}
